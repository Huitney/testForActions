name: CI Pipeline

on:
  workflow_run:
    workflows: ["deployment test server"]
    types: completed

jobs:
  php-tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Fix permissions for test directory
      run: |
        sudo chown -R $USER:$USER /var/www/html/test-website
        sudo chmod -R 755 /var/www/html/test-website

    - name: Install PHP dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zip unzip
        curl -sS https://getcomposer.org/installer | php
        php composer.phar install
      working-directory: /var/www/html/test-website

    - name: Run PHP Unit Tests and collect logs
      run: |
        php_start=$(date +%s.%N)
        ./vendor/bin/phpunit tests/exampleTest.php > /var/www/testForActions/php_test_result.log 2>&1 || touch /var/www/testForActions/php_test_result.log
        php_end=$(date +%s.%N)
        php_duration=$(echo "$php_end - $php_start" | bc)
        echo "php Time: ${php_duration}s"
      working-directory: /var/www/html/test-website
      continue-on-error: true
      
  insert-sql-php:
    uses: Huitney/testForActions/.github/workflows/insertSQL.yml@master
    with:
      name: 'php'
    needs: [php-tests]  # 確保 php-tests 先完成

  store-php-status:
    runs-on: self-hosted
    needs: [insert-sql-php]
    steps:
      - name: Store PHP Test Status
        run: echo "PHP_TEST_STATUS=${{ needs.insert-sql-php.outputs.testResult }}" >> $GITHUB_ENV
      
  js-tests:
    runs-on: self-hosted
    if: ${{ always() }}
    needs: [php-tests]
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Fix permissions for test directory
      run: |
        sudo chown -R $USER:$USER /var/www/html/test-website
        sudo chmod -R 755 /var/www/html/test-website

    - name: Install Node.js dependencies
      run: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install --lts
        nvm use --lts
        npm install
      working-directory: /var/www/html/test-website
      
    - name: Run JavaScript Tests and collect logs
      run: |
        js_start=$(date +%s.%N)
        npx --no-install jest tests/script.test.js > /var/www/testForActions/js_test_result.log 2>&1 || touch /var/www/testForActions/js_test_result.log
        js_end=$(date +%s.%N)
        js_duration=$(echo "$js_end - $js_start" | bc)
        echo "JS Time: ${js_duration}s"
      working-directory: /var/www/html/test-website
      continue-on-error: true
      
  insert-sql-js:
    uses: Huitney/testForActions/.github/workflows/insertSQL.yml@master
    with:
      name: 'js'
    needs: [js-tests]  # 確保 js-tests 先完成

  store-js-status:
    runs-on: self-hosted
    needs: [insert-sql-js]
    steps:
      - name: Store JS Test Status
        run: echo "JS_TEST_STATUS=${{ needs.insert-sql-js.outputs.testResult }}" >> $GITHUB_ENV
      
  snyk-security-tests:
    runs-on: self-hosted
    if: ${{ always() }}
    needs: [php-tests, js-tests]
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Fix permissions for test directory
      run: |
        sudo chown -R $USER:$USER /var/www/html/test-website
        sudo chmod -R 755 /var/www/html/test-website

    - name: Run Snyk Security Tests and collect logs
      run: |
        snyk_start=$(date +%s.%N)
        ./snyk/snykTest.sh > /var/www/testForActions/snyk_test_result.log 2>&1 || touch /var/www/testForActions/snyk_test_result.log
        snyk_end=$(date +%s.%N)
        snyk_duration=$(echo "$snyk_end - $snyk_start" | bc)
        echo "Snyk Time: ${snyk_duration}s"
      working-directory: /var/www/html/test-website
      continue-on-error: true
      
  insert-sql-snyk:
    uses: Huitney/testForActions/.github/workflows/insertSQL.yml@master
    with:
      name: 'snyk'
    needs: [snyk-tests]  # 確保 snyk-tests 先完成

  store-snyk-status:
    runs-on: self-hosted
    needs: [insert-sql-snyk]
    steps:
      - name: Store SNYK Test Status
        run: echo "SNYK_TEST_STATUS=${{ needs.insert-sql-snyk.outputs.testResult }}" >> $GITHUB_ENV

  deploy:
    needs: [insert-sql-php, insert-sql-js, insert-sql-snyk]
    if: ${{ needs.insert-sql-php.outputs.testResult == 'success' && needs.insert-sql-js.outputs.testResult == 'success' && needs.insert-sql-snyk.outputs.testResult == 'success' }}
    uses: Huitney/testForActions/.github/workflows/cd.yml@master
