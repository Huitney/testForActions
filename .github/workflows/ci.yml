name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Install PHP and Node.js dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zip unzip nodejs npm
        curl -sS https://getcomposer.org/installer | php
        php composer.phar install
      working-directory: /var/www/testForActions

    - name: Run PHP Unit Tests and collect logs
      run: |
        ./vendor/bin/phpunit tests/exampleTest.php > php_test_result.log 2>&1 || touch php_test_result.log
      working-directory: /var/www/testForActions
      continue-on-error: true

    - name: Run JavaScript Tests and collect logs
      run: |
        npx jest tests/script.test.js > js_test_result.log 2>&1 || touch js_test_result.log
      working-directory: /var/www/testForActions
      continue-on-error: true

    - name: Run Snyk Security Tests and collect logs
      run: |
        ./snyk/snykTest.sh > snyk_test_result.log 2>&1 || touch snyk_test_result.log
      working-directory: /var/www/testForActions
      continue-on-error: true

    - name: Collect and insert all test results into MySQL
      run: |
        # Collect PHP results
        php_result=$(<php_test_result.log)
        php_status="success"
        if grep -q "FAILURES" php_test_result.log; then php_status="failure"; fi

        # Collect JS results
        js_result=$(<js_test_result.log)
        js_status="success"
        if grep -q "FAIL" js_test_result.log; then js_status="failure"; fi

        # Collect Snyk results
        snyk_result=$(<snyk_test_result.log)
        snyk_status="success"
        if grep -q "ERROR" snyk_test_result.log; then snyk_status="failure"; fi

        # Combine all results into a single entry
        mysql -u ci_user -pci_password -D ci_test_reports -e "
          INSERT INTO test_results (test_name, result, status, log)
          VALUES 
          ('PHP Unit Tests', '$php_result', '$php_status', LOAD_FILE('/var/www/testForActions/php_test_result.log')),
          ('JavaScript Tests', '$js_result', '$js_status', LOAD_FILE('/var/www/testForActions/js_test_result.log')),
          ('Snyk Security Tests', '$snyk_result', '$snyk_status', LOAD_FILE('/var/www/testForActions/snyk_test_result.log'))
        ;"
      working-directory: /var/www/testForActions
      shell: /usr/bin/bash -e {0}

    - name: Update data.json with combined test results
      run: |
        # Collect summary counts
        total_success=$(mysql -u ci_user -pci_password -D ci_test_reports -s -N -e "SELECT COUNT(*) FROM test_results WHERE status='success';")
        total_failure=$(mysql -u ci_user -pci_password -D ci_test_reports -s -N -e "SELECT COUNT(*) FROM test_results WHERE status='failure';")
        total_errors=$(mysql -u ci_user -pci_password -D ci_test_reports -s -N -e "SELECT COUNT(*) FROM test_results WHERE result LIKE '%FAILURES%' OR result LIKE '%FAIL%';")
        last_updated=$(date +"%Y-%m-%d %H:%M:%S")

        # Update data.json
        cat <<EOT > /var/www/html/data.json
        {
          "summary": {
            "total_success": $total_success,
            "total_failure": $total_failure,
            "total_errors": $total_errors,
            "last_updated": "$last_updated"
          },
          "test_details": [
            {
              "test_name": "PHP Unit Tests",
              "status": "$php_status",
              "error_count": $(grep -o "FAILURES" php_test_result.log | wc -l)
            },
            {
              "test_name": "JavaScript Tests",
              "status": "$js_status",
              "error_count": $(grep -o "FAIL" js_test_result.log | wc -l)
            },
            {
              "test_name": "Snyk Security Tests",
              "status": "$snyk_status",
              "error_count": $(grep -o "ERROR" snyk_test_result.log | wc -l)
            }
          ]
        }
        EOT
      working-directory: /var/www/testForActions
