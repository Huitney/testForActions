name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Fix permissions for test directory
      run: |
        sudo chown -R $USER:$USER /var/www/testForActions
        sudo chmod -R 755 /var/www/testForActions

    - name: Install PHP dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zip unzip
        curl -sS https://getcomposer.org/installer | php
        php composer.phar install
      working-directory: /var/www/testForActions
      
    - name: Install nvm and Node.js
      run: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install --lts
        nvm use --lts
      shell: bash

    - name: Install Node.js dependencies
      run: npm install
      working-directory: /var/www/testForActions

    - name: Run PHP Unit Tests and collect logs
      run: |
        ./vendor/bin/phpunit tests/exampleTest.php > php_test_result.log 2>&1 || touch php_test_result.log
      working-directory: /var/www/testForActions
      continue-on-error: true

    - name: Run JavaScript Tests and collect logs
      run: |
        npx jest tests/script.test.js > js_test_result.log 2>&1 || touch js_test_result.log
      working-directory: /var/www/testForActions
      continue-on-error: true

    - name: Run Snyk Security Tests and collect logs
      run: |
        ./snyk/snykTest.sh > snyk_test_result.log 2>&1 || touch snyk_test_result.log
      working-directory: /var/www/testForActions
      continue-on-error: true

    - name: Collect and insert all test results into MySQL
      run: |
        # Collect PHP results
        php_result=$(<php_test_result.log)
        php_status="success"
        if grep -q "FAILURES" php_test_result.log; then php_status="failure"; fi

        # Collect JS results
        js_result=$(<js_test_result.log)
        js_status="success"
        if grep -q "FAIL" js_test_result.log; then js_status="failure"; fi

        # Collect Snyk results
        snyk_result=$(<snyk_test_result.log)
        snyk_status="success"
        if grep -q "ERROR" snyk_test_result.log; then snyk_status="failure"; fi
        
        # 獲取 GitHub 使用者名稱
        GITHUB_USER=${{ github.actor }}
        echo "GITHUB_USER: ${GITHUB_USER}"
        TABLE_NAME="test_results_${GITHUB_USER:-default_user}"
        echo "TABLE_NAME: ${TABLE_NAME}"

        # 動態組合資料表名稱
        TABLE_NAME="test_results_${GITHUB_USER}"
        echo "TABLE_NAME: ${TABLE_NAME}"

        # 檢查資料表是否存在，如果不存在則創建
        TABLE_EXISTS=$(mysql -u ci_user -pci_password -D ci_test_reports -e "SHOW TABLES LIKE '${TABLE_NAME}';" | grep "${TABLE_NAME}" | wc -l)

        if [ "$TABLE_EXISTS" -eq 0 ]; then
          echo "Table ${TABLE_NAME} does not exist. Creating..."
          mysql -u ci_user -pci_password -D ci_test_reports -e "
          CREATE TABLE ${TABLE_NAME} (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_name VARCHAR(255),
            result TEXT,
            status VARCHAR(50),
            log TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );"
        else
          echo "Table ${TABLE_NAME} exists. Proceeding..."
        fi

        # Combine all results into a single entry
        mysql -u ci_user -pci_password -D ci_test_reports -e "
          INSERT INTO ${TABLE_NAME} (test_name, result, status, log)
          VALUES 
          ('PHP Unit Tests', '$php_result', '$php_status', LOAD_FILE('/var/www/testForActions/php_test_result.log')),
          ('JavaScript Tests', '$js_result', '$js_status', LOAD_FILE('/var/www/testForActions/js_test_result.log')),
          ('Snyk Security Tests', '$snyk_result', '$snyk_status', LOAD_FILE('/var/www/testForActions/snyk_test_result.log'))
        ;"
      working-directory: /var/www/testForActions
      shell: /usr/bin/bash -e {0}

    - name: Set correct permissions for data.json
      run: |
        sudo chown -R www-data:www-data /var/www/html
        sudo chmod -R 755 /var/www/html
        sudo chown www-data:www-data /var/www/html/data.json
        sudo chmod 777 /var/www/html/data.json

    - name: Update data.json with combined test results
      run: |
        # Collect summary counts
        total_success=$(mysql -u ci_user -pci_password -D ci_test_reports -s -N -e "SELECT COUNT(*) FROM \`${TABLE_NAME}\` WHERE status='success';")
        total_failure=$(mysql -u ci_user -pci_password -D ci_test_reports -s -N -e "SELECT COUNT(*) FROM \`${TABLE_NAME}\` WHERE status='failure';")
        total_errors=$(mysql -u ci_user -pci_password -D ci_test_reports -s -N -e "SELECT COUNT(*) FROM \`${TABLE_NAME}\` WHERE result LIKE '%FAILURES%' OR result LIKE '%FAIL%';")
        last_updated=$(date +"%Y-%m-%d %H:%M:%S")

        # Update data.json
        sudo tee /var/www/html/data.json <<EOT
        {
          "summary": {
            "total_success": $total_success,
            "total_failure": $total_failure,
            "total_errors": $total_errors,
            "last_updated": "$last_updated"
          },
          "test_details": [
            {
              "test_name": "PHP Unit Tests",
              "status": "$php_status",
              "error_count": $(grep -o "FAILURES" php_test_result.log | wc -l)
            },
            {
              "test_name": "JavaScript Tests",
              "status": "$js_status",
              "error_count": $(grep -o "FAIL" js_test_result.log | wc -l)
            },
            {
              "test_name": "Snyk Security Tests",
              "status": "$snyk_status",
              "error_count": $(grep -o "ERROR" snyk_test_result.log | wc -l)
            }
          ]
        }
        EOT
      working-directory: /var/www/testForActions
