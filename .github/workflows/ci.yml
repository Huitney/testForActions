name: CI/CD Pipeline with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  php-tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Run PHP Unit Tests in Docker
      run: |
        docker run --rm \
          -v $PWD:/app \
          -w /app \
          php:8.3-cli bash -c "
          apt-get update && apt-get install -y unzip && \
          curl -sS https://getcomposer.org/installer | php && php composer.phar install && \
          ./vendor/bin/phpunit tests/exampleTest.php > php_test_result.log 2>&1 || touch php_test_result.log
        "

    - name: Collect and insert PHP test results into MySQL
      run: |
        docker run --rm \
          -v $PWD:/app \
          -w /app \
          mysql:latest bash -c "
          if [ ! -f php_test_result.log ]; then
            echo 'Error: php_test_result.log is missing.' && exit 1
          fi
          # Extract and insert results into MySQL
          php_status='success'
          php_error_count=$(grep -c 'FAILURES' php_test_result.log || echo '0')
          php_log=\$(cat php_test_result.log | tr -d \"'\n\r\")
          if grep -q 'FAILURES' php_test_result.log; then php_status='failure'; fi
          mysql -h localhost -u ci_user -pci_password -D ci_test_reports -e \"
            CREATE TABLE IF NOT EXISTS test_results_php (
              id INT AUTO_INCREMENT PRIMARY KEY,
              status VARCHAR(50),
              error_count VARCHAR(50),
              log TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            INSERT INTO test_results_php (status, error_count, log) VALUES ('$php_status', '$php_error_count', '$php_log');
          \"
        "

  js-tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Run JavaScript Tests in Docker
      run: |
        docker run --rm \
          -v $PWD:/app \
          -w /app \
          node:lts bash -c "
          npm install && \
          npx jest tests/script.test.js > js_test_result.log 2>&1 || touch js_test_result.log
        "

    - name: Collect and insert JavaScript test results into MySQL
      run: |
        docker run --rm \
          -v $PWD:/app \
          -w /app \
          mysql:latest bash -c "
          if [ ! -f js_test_result.log ]; then
            echo 'Error: js_test_result.log is missing.' && exit 1
          fi
          # Extract and insert results into MySQL
          js_status='success'
          js_error_count=$(grep -c 'FAIL' js_test_result.log || echo '0')
          js_log=\$(cat js_test_result.log | tr -d \"'\n\r\")
          if grep -q 'FAIL' js_test_result.log; then js_status='failure'; fi
          mysql -h localhost -u ci_user -pci_password -D ci_test_reports -e \"
            CREATE TABLE IF NOT EXISTS test_results_js (
              id INT AUTO_INCREMENT PRIMARY KEY,
              status VARCHAR(50),
              error_count VARCHAR(50),
              log TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            INSERT INTO test_results_js (status, error_count, log) VALUES ('$js_status', '$js_error_count', '$js_log');
          \"
        "

  snyk-security-tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Run Snyk Security Tests in Docker
      run: |
        docker run --rm \
          -v $PWD:/app \
          -w /app \
          snyk/snyk-cli:latest snyk test > snyk_test_result.log 2>&1 || touch snyk_test_result.log

    - name: Collect and insert Snyk test results into MySQL
      run: |
        docker run --rm \
          -v $PWD:/app \
          -w /app \
          mysql:latest bash -c "
          if [ ! -f snyk_test_result.log ]; then
            echo 'Error: snyk_test_result.log is missing.' && exit 1
          fi
          # Extract and insert results into MySQL
          snyk_status='success'
          snyk_error_count=$(grep -c 'ERROR' snyk_test_result.log || echo '0')
          snyk_log=\$(cat snyk_test_result.log | tr -d \"'\n\r\")
          if grep -q 'ERROR' snyk_test_result.log; then snyk_status='failure'; fi
          mysql -h localhost -u ci_user -pci_password -D ci_test_reports -e \"
            CREATE TABLE IF NOT EXISTS test_results_snyk (
              id INT AUTO_INCREMENT PRIMARY KEY,
              status VARCHAR(50),
              error_count VARCHAR(50),
              log TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            INSERT INTO test_results_snyk (status, error_count, log) VALUES ('$snyk_status', '$snyk_error_count', '$snyk_log');
          \"
        "
