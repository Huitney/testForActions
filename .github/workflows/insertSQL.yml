name: insertSQL
on:
  workflow_run:
    workflows: CI/CD Pipeline 
    types: completed
    
jobs:
  php-tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Collect and insert all test results into MySQL
      run: |
        # 檢查檔案是否存在，如果不存在則退出並顯示錯誤
        if [ ! -f php_test_result.log ]; then
          echo "Error: One or more log files are missing."
          exit 1
        fi

        # Collect PHP results
        php_status="success"
        php_error_count=$(grep -c "FAILURES" php_test_result.log || echo "0")
        php_error_location=$(grep -oP "at .*\.php:\d+" php_test_result.log || echo "無")
        php_line=$(grep -oP "(?<=:)\d+" php_test_result.log | tr '\n' ',' | sed 's/,$//' || echo "NULL")
        php_line="'$php_line'"
        php_log=$(cat php_test_result.log | tr -d "'\n\r")
        if grep -q "FAILURES" php_test_result.log; then php_status="failure"; fi
        
        # Debug prints
        echo "PHP Log: $php_log"
        
        # Get GitHub username and set dynamic table name
        GITHUB_USER=${{ github.actor }}
        TABLE_NAME="test_results_${GITHUB_USER}"

        # Create table if not exists
        TABLE_EXISTS=$(mysql -u ci_user -pci_password -D ci_test_reports -sse "SHOW TABLES LIKE '${TABLE_NAME}';")
        if [ -z "$TABLE_EXISTS" ]; then
          echo "Table ${TABLE_NAME} does not exist. Creating..."
          mysql -u ci_user -pci_password -D ci_test_reports -e "
          CREATE TABLE \`${TABLE_NAME}\` (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_name VARCHAR(255),
            test_location VARCHAR(255),
            line VARCHAR(255) DEFAULT NULL,
            error_count VARCHAR(50),
            error_location TEXT,
            status VARCHAR(50),
            log TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );"
        else
          echo "Table ${TABLE_NAME} exists. Proceeding..."
        fi

        # Format and insert results into the database using printf
        printf -v sql_query "
          INSERT INTO \`${TABLE_NAME}\` (test_name, test_location, line, error_count, error_location, status, log)
          VALUES 
          ('PHP Unit Tests', '%s', %s, '%s', '%s', '%s', '%s')
        ;" \
        "$PWD" "$php_line" "$php_error_count" "$php_error_location" "$php_status" "$php_log"

        # Execute the formatted SQL query
        mysql -u ci_user -pci_password -D ci_test_reports -e "$sql_query"
                
      working-directory: /var/www/testForActions
      shell: /usr/bin/bash -e {0}
      
  js-tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Collect and insert all test results into MySQL
      run: |
        # 檢查檔案是否存在，如果不存在則退出並顯示錯誤
        if [ ! -f js_test_result.log ]; then
          echo "Error: One or more log files are missing."
          exit 1
        fi

        # Collect JS results
        js_status="success"
        js_error_count=$(grep -c "FAIL" js_test_result.log || echo "0")
        js_error_location=$(grep -oP "at .*\.js:\d+" js_test_result.log || echo "無")
        js_line=$(grep -oP "(?<=:)\d+" js_test_result.log | tr '\n' ',' | sed 's/,$//' || echo "NULL")
        js_line="'$js_line'"
        js_log=$(cat js_test_result.log | tr -d "'\n\r")
        if grep -q "FAIL" js_test_result.log; then js_status="failure"; fi
        
        # Debug prints
        echo "JS Log: $js_log"
        
        # Get GitHub username and set dynamic table name
        GITHUB_USER=${{ github.actor }}
        TABLE_NAME="test_results_${GITHUB_USER}"

        # Create table if not exists
        TABLE_EXISTS=$(mysql -u ci_user -pci_password -D ci_test_reports -sse "SHOW TABLES LIKE '${TABLE_NAME}';")
        if [ -z "$TABLE_EXISTS" ]; then
          echo "Table ${TABLE_NAME} does not exist. Creating..."
          mysql -u ci_user -pci_password -D ci_test_reports -e "
          CREATE TABLE \`${TABLE_NAME}\` (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_name VARCHAR(255),
            test_location VARCHAR(255),
            line VARCHAR(255) DEFAULT NULL,
            error_count VARCHAR(50),
            error_location TEXT,
            status VARCHAR(50),
            log TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );"
        else
          echo "Table ${TABLE_NAME} exists. Proceeding..."
        fi

        # Format and insert results into the database using printf
        printf -v sql_query "
          INSERT INTO \`${TABLE_NAME}\` (test_name, test_location, line, error_count, error_location, status, log)
          VALUES 
          ('JavaScript Tests', '%s', %s, '%s', '%s', '%s', '%s')
        ;" \
        "$PWD" "$js_line" "$js_error_count" "$js_error_location" "$js_status" "$js_log"
        
        sql_query=$(echo "$sql_query" | tr -d '\n')

        # Execute the formatted SQL query
        mysql -u ci_user -pci_password -D ci_test_reports -e "$sql_query"
        
      working-directory: /var/www/testForActions
      shell: /usr/bin/bash -e {0}
  
  snyk-security-tests:
    runs-on: self-hosted
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Collect and insert all test results into MySQL
      run: |
        # 檢查檔案是否存在，如果不存在則退出並顯示錯誤
        if [ ! -f snyk_test_result.log ]; then
          echo "Error: One or more log files are missing."
          exit 1
        fi

        # Collect Snyk results
        snyk_status="success"
        snyk_error_count=$(grep -c "ERROR" snyk_test_result.log || echo "0")
        snyk_error_location=$(grep -oP "at .*:\d+" snyk_test_result.log || echo "無")
        snyk_line=$(grep -oP "(?<=:)\d+" snyk_test_result.log | tr '\n' ',' | sed 's/,$//' || echo "NULL")
        snyk_line="'$snyk_line'"
        snyk_log=$(cat snyk_test_result.log | sed ':a;N;$!ba;s/\n/ /g' | tr -d "'\r")
        if grep -q "ERROR" snyk_test_result.log; then snyk_status="failure"; fi

        # Debug prints
        echo "Snyk Log: $snyk_log"

        # Get GitHub username and set dynamic table name
        GITHUB_USER=${{ github.actor }}
        TABLE_NAME="test_results_${GITHUB_USER}"

        # Create table if not exists
        TABLE_EXISTS=$(mysql -u ci_user -pci_password -D ci_test_reports -sse "SHOW TABLES LIKE '${TABLE_NAME}';")
        if [ -z "$TABLE_EXISTS" ]; then
          echo "Table ${TABLE_NAME} does not exist. Creating..."
          mysql -u ci_user -pci_password -D ci_test_reports -e "
          CREATE TABLE \`${TABLE_NAME}\` (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_name VARCHAR(255),
            test_location VARCHAR(255),
            line VARCHAR(255) DEFAULT NULL,
            error_count VARCHAR(50),
            error_location TEXT,
            status VARCHAR(50),
            log TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );"
        else
          echo "Table ${TABLE_NAME} exists. Proceeding..."
        fi

        # Format and insert results into the database using printf
        printf -v sql_query "
          INSERT INTO \`${TABLE_NAME}\` (test_name, test_location, line, error_count, error_location, status, log)
          VALUES 
          ('Snyk Security Tests', '%s', %s, '%s', '%s', '%s', '%s')
        ;" \
        "$PWD" "${snyk_line:-NULL}" "$snyk_error_count" "$snyk_error_location" "$snyk_status" "$snyk_log"
        
        sql_query=$(echo "$sql_query" | tr -d '\n')
        

        # Execute the formatted SQL query
        mysql -u ci_user -pci_password -D ci_test_reports -e "$sql_query"
        
      working-directory: /var/www/testForActions
      shell: /usr/bin/bash -e {0}